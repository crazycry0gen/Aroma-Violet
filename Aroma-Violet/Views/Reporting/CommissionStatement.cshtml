@model List<Aroma_Violet.Models.ReportCommisionStatementViewModel>
@{
    ViewBag.Title = "CommissionStatement";
    var fmt = "#,###,##0.00";
    var clientId = 0;

}
@using (Html.BeginForm())
{
    <div id="EmailBody">
        
        

        <div id="NoPrintHeader">
            
            <table>
                <tr></tr>
                <tr>
                    <td>@Html.DropDownList("specificPeriodId", null, htmlAttributes: new { @class = "form-control" })</td>
                    <td><input type="submit" value="Filter" class="btn btn-default" /></td>
                </tr>
            </table>
        </div>
        <div id="PrintBit"> 
            <h2 style="text-decoration: underline">Commission Statement</h2>
            @foreach (var statement in Model)
            {
                clientId = statement.ClientId;
                <h3>Name: @statement.Name</h3>
                <h3>Reseller No: @statement.ClientId</h3>
                <h3>Month: @statement.Description</h3>

                var own = statement.Periods.Where(m => m.Level == 0).FirstOrDefault();
                var down = statement.Periods.Where(m => m.Level != 0).OrderBy(m => m.Level).ToArray();
                decimal downTot = 0;
                decimal downRebateTot = 0;
                decimal resellerTot = 0;
                if (own != null)
                {
                    <h4 style="text-decoration: underline; font-weight: bold">Volume Discounts</h4>
                    <table>
                        <tr>
                            <th colspan="5">Period: From @own.PeriodStart to @own.PeriodEnd</th>
                        </tr>
                        <tr>
                            <th>Own purchases</th>
                            <td class="Number">@own.Amount.ToString(fmt)</td>
                        </tr>
                        <tr>
                            <th>Volume Discount Percentage</th>
                            <td class="Number">@own.AmountPer.ToString(fmt)</td>
                        </tr>
                        <tr>
                            <th>Volume Discount Value</th>
                            <th class="Number">@own.AmountValue.ToString(fmt)</th>
                        </tr>
                    </table>
                    <p>* Please take note that your Sales Account with Novus Fragrances (Pty) Ltd has been credited with the above amount. This amount can be set-off against future purchases.</p>

                    <h4 style="text-decoration: underline; font-weight: bold">Rebates (Commission) earned</h4>
                    <h5 style="text-decoration: underline;">Cash Purchases by Related Resellers</h5>
                    <table>
                        <tr>
                            <th>Level</th>
                            <th colspan="3"></th>
                            <th colspan="3" class="Number">Value of purchases</th>
                            <th colspan="3"></th>
                            <th class="Number">Rebate %</th>
                            <th colspan="3"></th>
                            <th class="Number">Rebate Value</th>
                        </tr>
                        @for (int i = 0; i < down.Length; i++)
                        {
                            downTot += down[i].Amount;
                            downRebateTot += down[i].AmountValue;
                            <tr class="findisp">
                                <td>@down[i].Level</td>
                                <td colspan="3"></td>
                                <td colspan="3" class="Number">@down[i].Amount.ToString(fmt)</td>
                                <td colspan="3"></td>
                                <td class="Number">@down[i].AmountPer.ToString(fmt)</td>
                                <td colspan="3"></td>
                                <td class="Number">@down[i].AmountValue.ToString(fmt)</td>
                            </tr>
                        }
                        <tr>
                            <th>Sub Total</th>
                            <th colspan="3"></th>
                            <th colspan="3" class="Number">@downTot.ToString(fmt)</th>
                            <th colspan="3"></th>
                            <th></th>
                            <th colspan="3"></th>
                            <th class="Number">@downRebateTot.ToString(fmt)</th>
                        </tr>
                    </table>
                    <p><strong>NOTE:</strong> To qualify for Rebates, you must purchase products to the value of at least R200 in the calendar month in which rebates are calculated.</p>

                    <h5 style="text-decoration: underline;">Subscription Sales by own Customers and Realated Resellers' Customers</h5>
                    <table>
                        <tr>
                            <th style="font-size:x-small">Level</th>
                            <th style="font-size:x-small" colspan="3">Value of subscriptions (1st Product)</th>
                            <th style="font-size:x-small" colspan="3">% Rebates earned subscriptions 1st product</th>
                            <th style="font-size:x-small" colspan="3">RebateValue earned (1st product)</th>
                            <th style="font-size:x-small" colspan="3">Value of subscriptions (2nd Product)</th>
                            <th style="font-size:x-small" colspan="3">% Rebates earned subscriptions 2nd product</th>
                            <th style="font-size:x-small" colspan="3">Rebate Value earned 2nd product</th>
                            <th style="font-size:x-small" colspan="3">Total Subscription Rebates earned</th>
                        </tr>
                        @{
                            resellerTot = downRebateTot;
                            downTot = 0;
                            downRebateTot = 0;
                            decimal downTot1 = 0;
                            decimal downRebateTot1 = 0;

                        }
                        @for (int i = 0; i < down.Length; i++)
                        {
                            downTot += down[i].SubscriptionFirstProduct;
                            downRebateTot += down[i].SubscriptionFirstProductValue;
                            downTot1 += down[i].SubscriptionOtherProduct;
                            downRebateTot1 += down[i].SubscriptionOtherProductValue;
                            <tr class="findisp">
                                <td style="font-size:x-small">@down[i].Level</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionFirstProduct.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionFirstProductPer.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionFirstProductValue.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionOtherProduct.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionOtherProductPer.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@down[i].SubscriptionOtherProductValue.ToString(fmt)</td>
                                <td style="font-size:x-small" class="Number" colspan="3">@((down[i].SubscriptionFirstProductValue + down[i].SubscriptionOtherProductValue).ToString(fmt))</td>
                            </tr>
                        }
                        <tr>
                            <th style="font-size:x-small">Sub Total</th>
                            <th style="font-size:x-small" class="Number" colspan="3">@downTot.ToString(fmt)</th>
                            <th style="font-size:x-small" colspan="3"></th>
                            <th style="font-size:x-small" class="Number" colspan="3">@downRebateTot.ToString(fmt)</th>
                            <th style="font-size:x-small" class="Number" colspan="3">@downTot1.ToString(fmt)</th>
                            <th style="font-size:x-small" colspan="3"></th>
                            <th style="font-size:x-small" class="Number" colspan="3">@downRebateTot1.ToString(fmt)</th>
                            <th style="font-size:x-small" class="Number" colspan="3">@((downRebateTot + downRebateTot1).ToString(fmt))</th>
                        </tr>
                    </table>
                    <h5 style="text-decoration: underline; font-weight: bold">Total Rebates Earned</h5>
                    <table>
                        <tr>
                            <td colspan="2">Cash Purchases by Related Resellers</td>
                            <td class="Number">@resellerTot.ToString(fmt)</td>
                            <td colspan="4"></td>
                        </tr>
                        <tr>
                            <td colspan="2">Product Subscription Rebates</td>
                            <td class="Number">@((downRebateTot + downRebateTot1).ToString(fmt))</td>
                            <td colspan="4"></td>
                        </tr>
                        <tr>
                            <th colspan="2">Total</th>
                            <th class="Number">@((downRebateTot + downRebateTot1 + resellerTot).ToString(fmt))</th>
                            <td colspan="4"></td>
                        </tr>
                    </table>
                    <p>This amount will be paid into your bank account on or before the 7th of the month following the calendar month in which rebates were calculated.</p>

                    <h5 style="text-decoration: underline; font-weight: bold">Down-line details & Purchases</h5>
                    <h5>Related Resellers</h5>
                            for (int i = 0; i < down.Length; i++)
                            {
                                <h6 style="text-decoration: underline;">Level @down[i].Level</h6>
                                <table>
                                    <tr>
                                        <th style="font-size: x-small">No</th>
                                        <th style="font-size: x-small" colspan="2">Name</th>
                                        <th style="font-size: x-small">Reseller No</th>
                                        <th style="font-size: x-small">Status</th>
                                        <th style="font-size: x-small">Title</th>
                                        <th style="font-size: x-small">Cellphone Number</th>
                                        <th style="font-size: x-small" colspan="3">Email Address</th>
                                        <th style="font-size: x-small" colspan="2">Introducer Name</th>
                                        <th style="font-size: x-small">Introducer No</th>
                                        <th style="font-size: x-small">Product Purchases</th>
                                        <th style="font-size: x-small" colspan="2">Rebates earned on this member</th>
                                    </tr>
                                    @{
                                        decimal sum1 = 0;
                                        decimal sum2 = 0;
                                    }
                                    @for (int c = 0; c < down[i].Detail.Length; c++)
                                    {

                                        <tr class="findisp">
                                            <td style="font-size: x-small">@((c + 1))</td>
                                            <td style="font-size: x-small" colspan="2">@down[i].Detail[c].ClientDescription</td>
                                            <td style="font-size: x-small">@down[i].Detail[c].Client.ClientId</td>
                                            <td style="font-size: x-small">@(down[i].Detail[c].Client.Active ? "Active" : "Inactive")</td>
                                            <td style="font-size: x-small">@down[i].Detail[c].Client.ClientType.ClientTypeName</td>
                                            @if (down[i].Level < 2)
                                            {
                                                <td style="font-size: x-small">@down[i].Detail[c].Cell</td>
                                                <td style="font-size: x-small" colspan="3">@down[i].Detail[c].EMail</td>
                                            }
                                            else
                                            {
                                                <td style="font-size: x-small">xxxxxxxxxx</td>
                                                <td style="font-size: x-small" colspan="3">xxxxxxxxxx</td>
                                            }
                                            <td style="font-size: x-small" colspan="2">@down[i].Detail[c].Introducer</td>
                                            <td style="font-size: x-small">@down[i].Detail[c].Client.ResellerID</td>
                                            <td style="font-size: x-small" class="Number">@down[i].Detail[c].Amount.ToString(fmt)</td>
                                            <td style="font-size: x-small" class="Number">@((down[i].Detail[c].Amount * (down[i].AmountPer / 100)).ToString(fmt)) </td>
                                        </tr>
                                        sum1 += down[i].Detail[c].Amount;
                                        sum2 += down[i].Detail[c].Amount * (down[i].AmountPer / 100);
                                    }
                                    <tr>
                                        <th colspan="12"></th>
                                        <th style="font-size:x-small">Total</th>
                                        <th style="font-size:x-small" class="Number">@sum1.ToString(fmt)</th>
                                        <th style="font-size:x-small" class="Number">@sum2.ToString(fmt)</th>
                                    </tr>
                                </table>
                                            }
                                        }
                                        else
                                        {
                                            <p> No data found</p>
                                            }
                                        }
        </div>
        
    </div>
                                        }

<div id="ResponseNode"></div>

<div id="NoPrintHeader1">
    <a href="#" onclick="SwitchToPrint()">Print</a>|
    <a href="#" onclick="SwitchToEmail()">Email</a>

</div>

<script type="text/javascript">

        function SwitchToPrint() {

            var printDiv = document.getElementById("PrintBit");
            printDiv.style.position = "absolute";
            printDiv.style.top = 0;
            SetVisible("Nav", false);
            SetVisible("NoPrintHeader", false);
            SetVisible("NoPrintHeader1", false);
            window.print();
            SetVisible("Nav", true);
            SetVisible("NoPrintHeader", true);
            SetVisible("NoPrintHeader1", true);
            printDiv.style.position = "relative";
        }

        function SwitchToEmail() {

            Email('@clientId', 'PrintBit', 'Commission Statement ' + @clientId, '1')
        }
</script>