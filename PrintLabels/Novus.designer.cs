#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrintLabels
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Novus")]
	public partial class NovusDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPickingListHeader(PickingListHeader instance);
    partial void UpdatePickingListHeader(PickingListHeader instance);
    partial void DeletePickingListHeader(PickingListHeader instance);
    partial void InsertPickingListDetail(PickingListDetail instance);
    partial void UpdatePickingListDetail(PickingListDetail instance);
    partial void DeletePickingListDetail(PickingListDetail instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAddressLine(AddressLine instance);
    partial void UpdateAddressLine(AddressLine instance);
    partial void DeleteAddressLine(AddressLine instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    #endregion
		
		public NovusDataContext() : 
				base(global::PrintLabels.Properties.Settings.Default.NovusConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NovusDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovusDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovusDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovusDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PickingListHeader> PickingListHeaders
		{
			get
			{
				return this.GetTable<PickingListHeader>();
			}
		}
		
		public System.Data.Linq.Table<PickingListDetail> PickingListDetails
		{
			get
			{
				return this.GetTable<PickingListDetail>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<AddressLine> AddressLines
		{
			get
			{
				return this.GetTable<AddressLine>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PickingListHeader")]
	public partial class PickingListHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PickingListHeaderId;
		
		private int _ShippingTypeId;
		
		private int _ShippingMethodId;
		
		private System.Nullable<System.DateTime> _PickingDate;
		
		private System.Nullable<System.DateTime> _ShippedDate;
		
		private EntitySet<PickingListDetail> _PickingListDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPickingListHeaderIdChanging(int value);
    partial void OnPickingListHeaderIdChanged();
    partial void OnShippingTypeIdChanging(int value);
    partial void OnShippingTypeIdChanged();
    partial void OnShippingMethodIdChanging(int value);
    partial void OnShippingMethodIdChanged();
    partial void OnPickingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPickingDateChanged();
    partial void OnShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShippedDateChanged();
    #endregion
		
		public PickingListHeader()
		{
			this._PickingListDetails = new EntitySet<PickingListDetail>(new Action<PickingListDetail>(this.attach_PickingListDetails), new Action<PickingListDetail>(this.detach_PickingListDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingListHeaderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PickingListHeaderId
		{
			get
			{
				return this._PickingListHeaderId;
			}
			set
			{
				if ((this._PickingListHeaderId != value))
				{
					this.OnPickingListHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._PickingListHeaderId = value;
					this.SendPropertyChanged("PickingListHeaderId");
					this.OnPickingListHeaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingTypeId", DbType="Int NOT NULL")]
		public int ShippingTypeId
		{
			get
			{
				return this._ShippingTypeId;
			}
			set
			{
				if ((this._ShippingTypeId != value))
				{
					this.OnShippingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ShippingTypeId = value;
					this.SendPropertyChanged("ShippingTypeId");
					this.OnShippingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingMethodId", DbType="Int NOT NULL")]
		public int ShippingMethodId
		{
			get
			{
				return this._ShippingMethodId;
			}
			set
			{
				if ((this._ShippingMethodId != value))
				{
					this.OnShippingMethodIdChanging(value);
					this.SendPropertyChanging();
					this._ShippingMethodId = value;
					this.SendPropertyChanged("ShippingMethodId");
					this.OnShippingMethodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PickingDate
		{
			get
			{
				return this._PickingDate;
			}
			set
			{
				if ((this._PickingDate != value))
				{
					this.OnPickingDateChanging(value);
					this.SendPropertyChanging();
					this._PickingDate = value;
					this.SendPropertyChanged("PickingDate");
					this.OnPickingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShippedDate
		{
			get
			{
				return this._ShippedDate;
			}
			set
			{
				if ((this._ShippedDate != value))
				{
					this.OnShippedDateChanging(value);
					this.SendPropertyChanging();
					this._ShippedDate = value;
					this.SendPropertyChanged("ShippedDate");
					this.OnShippedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PickingListHeader_PickingListDetail", Storage="_PickingListDetails", ThisKey="PickingListHeaderId", OtherKey="PickingListHeaderId")]
		public EntitySet<PickingListDetail> PickingListDetails
		{
			get
			{
				return this._PickingListDetails;
			}
			set
			{
				this._PickingListDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.PickingListHeader = this;
		}
		
		private void detach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.PickingListHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PickingListDetail")]
	public partial class PickingListDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PickingListDetailId;
		
		private int _PickingListHeaderId;
		
		private int _ProductID;
		
		private int _TotalItems;
		
		private int _TransferQuantity;
		
		private int _ClientID;
		
		private int _OrderLineId;
		
		private string _TrackingNumber;
		
		private bool _Active;
		
		private System.Guid _GroupId;
		
		private System.Nullable<int> _Address_AddressId;
		
		private EntityRef<PickingListHeader> _PickingListHeader;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPickingListDetailIdChanging(int value);
    partial void OnPickingListDetailIdChanged();
    partial void OnPickingListHeaderIdChanging(int value);
    partial void OnPickingListHeaderIdChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnTotalItemsChanging(int value);
    partial void OnTotalItemsChanged();
    partial void OnTransferQuantityChanging(int value);
    partial void OnTransferQuantityChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnOrderLineIdChanging(int value);
    partial void OnOrderLineIdChanged();
    partial void OnTrackingNumberChanging(string value);
    partial void OnTrackingNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnGroupIdChanging(System.Guid value);
    partial void OnGroupIdChanged();
    partial void OnAddress_AddressIdChanging(System.Nullable<int> value);
    partial void OnAddress_AddressIdChanged();
    #endregion
		
		public PickingListDetail()
		{
			this._PickingListHeader = default(EntityRef<PickingListHeader>);
			this._Address = default(EntityRef<Address>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingListDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PickingListDetailId
		{
			get
			{
				return this._PickingListDetailId;
			}
			set
			{
				if ((this._PickingListDetailId != value))
				{
					this.OnPickingListDetailIdChanging(value);
					this.SendPropertyChanging();
					this._PickingListDetailId = value;
					this.SendPropertyChanged("PickingListDetailId");
					this.OnPickingListDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingListHeaderId", DbType="Int NOT NULL")]
		public int PickingListHeaderId
		{
			get
			{
				return this._PickingListHeaderId;
			}
			set
			{
				if ((this._PickingListHeaderId != value))
				{
					if (this._PickingListHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPickingListHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._PickingListHeaderId = value;
					this.SendPropertyChanged("PickingListHeaderId");
					this.OnPickingListHeaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalItems", DbType="Int NOT NULL")]
		public int TotalItems
		{
			get
			{
				return this._TotalItems;
			}
			set
			{
				if ((this._TotalItems != value))
				{
					this.OnTotalItemsChanging(value);
					this.SendPropertyChanging();
					this._TotalItems = value;
					this.SendPropertyChanged("TotalItems");
					this.OnTotalItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferQuantity", DbType="Int NOT NULL")]
		public int TransferQuantity
		{
			get
			{
				return this._TransferQuantity;
			}
			set
			{
				if ((this._TransferQuantity != value))
				{
					this.OnTransferQuantityChanging(value);
					this.SendPropertyChanging();
					this._TransferQuantity = value;
					this.SendPropertyChanged("TransferQuantity");
					this.OnTransferQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderLineId", DbType="Int NOT NULL")]
		public int OrderLineId
		{
			get
			{
				return this._OrderLineId;
			}
			set
			{
				if ((this._OrderLineId != value))
				{
					this.OnOrderLineIdChanging(value);
					this.SendPropertyChanging();
					this._OrderLineId = value;
					this.SendPropertyChanged("OrderLineId");
					this.OnOrderLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackingNumber", DbType="NVarChar(MAX)")]
		public string TrackingNumber
		{
			get
			{
				return this._TrackingNumber;
			}
			set
			{
				if ((this._TrackingNumber != value))
				{
					this.OnTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingNumber = value;
					this.SendPropertyChanged("TrackingNumber");
					this.OnTrackingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_AddressId", DbType="Int")]
		public System.Nullable<int> Address_AddressId
		{
			get
			{
				return this._Address_AddressId;
			}
			set
			{
				if ((this._Address_AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_AddressIdChanging(value);
					this.SendPropertyChanging();
					this._Address_AddressId = value;
					this.SendPropertyChanged("Address_AddressId");
					this.OnAddress_AddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PickingListHeader_PickingListDetail", Storage="_PickingListHeader", ThisKey="PickingListHeaderId", OtherKey="PickingListHeaderId", IsForeignKey=true)]
		public PickingListHeader PickingListHeader
		{
			get
			{
				return this._PickingListHeader.Entity;
			}
			set
			{
				PickingListHeader previousValue = this._PickingListHeader.Entity;
				if (((previousValue != value) 
							|| (this._PickingListHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PickingListHeader.Entity = null;
						previousValue.PickingListDetails.Remove(this);
					}
					this._PickingListHeader.Entity = value;
					if ((value != null))
					{
						value.PickingListDetails.Add(this);
						this._PickingListHeaderId = value.PickingListHeaderId;
					}
					else
					{
						this._PickingListHeaderId = default(int);
					}
					this.SendPropertyChanged("PickingListHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PickingListDetail", Storage="_Address", ThisKey="Address_AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.PickingListDetails.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.PickingListDetails.Add(this);
						this._Address_AddressId = value.AddressId;
					}
					else
					{
						this._Address_AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PickingListDetail", Storage="_Client", ThisKey="ClientID", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.PickingListDetails.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.PickingListDetails.Add(this);
						this._ClientID = value.ClientId;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _Code;
		
		private int _ClientID;
		
		private int _AddressTypeID;
		
		private bool _Active;
		
		private System.Nullable<int> _Client_ClientId;
		
		private EntitySet<PickingListDetail> _PickingListDetails;
		
		private EntitySet<AddressLine> _AddressLines;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Client> _Clients1;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnClient_ClientIdChanging(System.Nullable<int> value);
    partial void OnClient_ClientIdChanged();
    #endregion
		
		public Address()
		{
			this._PickingListDetails = new EntitySet<PickingListDetail>(new Action<PickingListDetail>(this.attach_PickingListDetails), new Action<PickingListDetail>(this.detach_PickingListDetails));
			this._AddressLines = new EntitySet<AddressLine>(new Action<AddressLine>(this.attach_AddressLines), new Action<AddressLine>(this.detach_AddressLines));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Clients1 = new EntitySet<Client>(new Action<Client>(this.attach_Clients1), new Action<Client>(this.detach_Clients1));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int NOT NULL")]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client_ClientId", DbType="Int")]
		public System.Nullable<int> Client_ClientId
		{
			get
			{
				return this._Client_ClientId;
			}
			set
			{
				if ((this._Client_ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClient_ClientIdChanging(value);
					this.SendPropertyChanging();
					this._Client_ClientId = value;
					this.SendPropertyChanged("Client_ClientId");
					this.OnClient_ClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PickingListDetail", Storage="_PickingListDetails", ThisKey="AddressId", OtherKey="Address_AddressId")]
		public EntitySet<PickingListDetail> PickingListDetails
		{
			get
			{
				return this._PickingListDetails;
			}
			set
			{
				this._PickingListDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AddressLine", Storage="_AddressLines", ThisKey="AddressId", OtherKey="AddressID")]
		public EntitySet<AddressLine> AddressLines
		{
			get
			{
				return this._AddressLines;
			}
			set
			{
				this._AddressLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client", Storage="_Clients", ThisKey="AddressId", OtherKey="DeliveryAddress_AddressId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client1", Storage="_Clients1", ThisKey="AddressId", OtherKey="PostalAddress_AddressId")]
		public EntitySet<Client> Clients1
		{
			get
			{
				return this._Clients1;
			}
			set
			{
				this._Clients1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Address", Storage="_Client", ThisKey="Client_ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._Client_ClientId = value.ClientId;
					}
					else
					{
						this._Client_ClientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_AddressLines(AddressLine entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_AddressLines(AddressLine entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Clients1(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = this;
		}
		
		private void detach_Clients1(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressLine")]
	public partial class AddressLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressLineId;
		
		private string _AddressLineText;
		
		private int _AddressID;
		
		private int _Order;
		
		private bool _Active;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressLineIdChanging(int value);
    partial void OnAddressLineIdChanged();
    partial void OnAddressLineTextChanging(string value);
    partial void OnAddressLineTextChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public AddressLine()
		{
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressLineId
		{
			get
			{
				return this._AddressLineId;
			}
			set
			{
				if ((this._AddressLineId != value))
				{
					this.OnAddressLineIdChanging(value);
					this.SendPropertyChanging();
					this._AddressLineId = value;
					this.SendPropertyChanged("AddressLineId");
					this.OnAddressLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLineText", DbType="NVarChar(MAX)")]
		public string AddressLineText
		{
			get
			{
				return this._AddressLineText;
			}
			set
			{
				if ((this._AddressLineText != value))
				{
					this.OnAddressLineTextChanging(value);
					this.SendPropertyChanging();
					this._AddressLineText = value;
					this.SendPropertyChanged("AddressLineText");
					this.OnAddressLineTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AddressLine", Storage="_Address", ThisKey="AddressID", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.AddressLines.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.AddressLines.Add(this);
						this._AddressID = value.AddressId;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _ClientInitials;
		
		private string _NickName;
		
		private string _FullNames;
		
		private string _Occupation;
		
		private int _LanguageID;
		
		private string _Employer;
		
		private System.DateTime _DateOfBirth;
		
		private string _ClientSurname;
		
		private bool _SAResident;
		
		private string _IDNumber;
		
		private int _ClientTypeID;
		
		private int _TitleID;
		
		private int _EthnicGroupID;
		
		private int _IncomeGroupID;
		
		private int _ProvinceID;
		
		private int _CountryID;
		
		private string _CompanyName;
		
		private string _RegistrationNumber;
		
		private System.Nullable<int> _ResellerID;
		
		private bool _Active;
		
		private bool _IgnoreRebate;
		
		private string _TelWork;
		
		private string _Cell;
		
		private string _TelHome;
		
		private string _Email;
		
		private string _Discriminator;
		
		private System.Nullable<int> _DeliveryAddress_AddressId;
		
		private System.Nullable<int> _PostalAddress_AddressId;
		
		private EntitySet<PickingListDetail> _PickingListDetails;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Address> _Address1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnClientInitialsChanging(string value);
    partial void OnClientInitialsChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnFullNamesChanging(string value);
    partial void OnFullNamesChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnEmployerChanging(string value);
    partial void OnEmployerChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnClientSurnameChanging(string value);
    partial void OnClientSurnameChanged();
    partial void OnSAResidentChanging(bool value);
    partial void OnSAResidentChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnClientTypeIDChanging(int value);
    partial void OnClientTypeIDChanged();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnEthnicGroupIDChanging(int value);
    partial void OnEthnicGroupIDChanged();
    partial void OnIncomeGroupIDChanging(int value);
    partial void OnIncomeGroupIDChanged();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnRegistrationNumberChanging(string value);
    partial void OnRegistrationNumberChanged();
    partial void OnResellerIDChanging(System.Nullable<int> value);
    partial void OnResellerIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnIgnoreRebateChanging(bool value);
    partial void OnIgnoreRebateChanged();
    partial void OnTelWorkChanging(string value);
    partial void OnTelWorkChanged();
    partial void OnCellChanging(string value);
    partial void OnCellChanged();
    partial void OnTelHomeChanging(string value);
    partial void OnTelHomeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    partial void OnDeliveryAddress_AddressIdChanging(System.Nullable<int> value);
    partial void OnDeliveryAddress_AddressIdChanged();
    partial void OnPostalAddress_AddressIdChanging(System.Nullable<int> value);
    partial void OnPostalAddress_AddressIdChanged();
    #endregion
		
		public Client()
		{
			this._PickingListDetails = new EntitySet<PickingListDetail>(new Action<PickingListDetail>(this.attach_PickingListDetails), new Action<PickingListDetail>(this.detach_PickingListDetails));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Address = default(EntityRef<Address>);
			this._Address1 = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientInitials", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientInitials
		{
			get
			{
				return this._ClientInitials;
			}
			set
			{
				if ((this._ClientInitials != value))
				{
					this.OnClientInitialsChanging(value);
					this.SendPropertyChanging();
					this._ClientInitials = value;
					this.SendPropertyChanged("ClientInitials");
					this.OnClientInitialsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="NVarChar(MAX)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullNames", DbType="NVarChar(MAX)")]
		public string FullNames
		{
			get
			{
				return this._FullNames;
			}
			set
			{
				if ((this._FullNames != value))
				{
					this.OnFullNamesChanging(value);
					this.SendPropertyChanging();
					this._FullNames = value;
					this.SendPropertyChanged("FullNames");
					this.OnFullNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="NVarChar(MAX)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Employer
		{
			get
			{
				return this._Employer;
			}
			set
			{
				if ((this._Employer != value))
				{
					this.OnEmployerChanging(value);
					this.SendPropertyChanging();
					this._Employer = value;
					this.SendPropertyChanged("Employer");
					this.OnEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientSurname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ClientSurname
		{
			get
			{
				return this._ClientSurname;
			}
			set
			{
				if ((this._ClientSurname != value))
				{
					this.OnClientSurnameChanging(value);
					this.SendPropertyChanging();
					this._ClientSurname = value;
					this.SendPropertyChanged("ClientSurname");
					this.OnClientSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SAResident", DbType="Bit NOT NULL")]
		public bool SAResident
		{
			get
			{
				return this._SAResident;
			}
			set
			{
				if ((this._SAResident != value))
				{
					this.OnSAResidentChanging(value);
					this.SendPropertyChanging();
					this._SAResident = value;
					this.SendPropertyChanged("SAResident");
					this.OnSAResidentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientTypeID", DbType="Int NOT NULL")]
		public int ClientTypeID
		{
			get
			{
				return this._ClientTypeID;
			}
			set
			{
				if ((this._ClientTypeID != value))
				{
					this.OnClientTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClientTypeID = value;
					this.SendPropertyChanged("ClientTypeID");
					this.OnClientTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int NOT NULL")]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EthnicGroupID", DbType="Int NOT NULL")]
		public int EthnicGroupID
		{
			get
			{
				return this._EthnicGroupID;
			}
			set
			{
				if ((this._EthnicGroupID != value))
				{
					this.OnEthnicGroupIDChanging(value);
					this.SendPropertyChanging();
					this._EthnicGroupID = value;
					this.SendPropertyChanged("EthnicGroupID");
					this.OnEthnicGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeGroupID", DbType="Int NOT NULL")]
		public int IncomeGroupID
		{
			get
			{
				return this._IncomeGroupID;
			}
			set
			{
				if ((this._IncomeGroupID != value))
				{
					this.OnIncomeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._IncomeGroupID = value;
					this.SendPropertyChanged("IncomeGroupID");
					this.OnIncomeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int NOT NULL")]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(MAX)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNumber", DbType="NVarChar(MAX)")]
		public string RegistrationNumber
		{
			get
			{
				return this._RegistrationNumber;
			}
			set
			{
				if ((this._RegistrationNumber != value))
				{
					this.OnRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNumber = value;
					this.SendPropertyChanged("RegistrationNumber");
					this.OnRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResellerID", DbType="Int")]
		public System.Nullable<int> ResellerID
		{
			get
			{
				return this._ResellerID;
			}
			set
			{
				if ((this._ResellerID != value))
				{
					this.OnResellerIDChanging(value);
					this.SendPropertyChanging();
					this._ResellerID = value;
					this.SendPropertyChanged("ResellerID");
					this.OnResellerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnoreRebate", DbType="Bit NOT NULL")]
		public bool IgnoreRebate
		{
			get
			{
				return this._IgnoreRebate;
			}
			set
			{
				if ((this._IgnoreRebate != value))
				{
					this.OnIgnoreRebateChanging(value);
					this.SendPropertyChanging();
					this._IgnoreRebate = value;
					this.SendPropertyChanged("IgnoreRebate");
					this.OnIgnoreRebateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelWork", DbType="NVarChar(MAX)")]
		public string TelWork
		{
			get
			{
				return this._TelWork;
			}
			set
			{
				if ((this._TelWork != value))
				{
					this.OnTelWorkChanging(value);
					this.SendPropertyChanging();
					this._TelWork = value;
					this.SendPropertyChanged("TelWork");
					this.OnTelWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell", DbType="NVarChar(MAX)")]
		public string Cell
		{
			get
			{
				return this._Cell;
			}
			set
			{
				if ((this._Cell != value))
				{
					this.OnCellChanging(value);
					this.SendPropertyChanging();
					this._Cell = value;
					this.SendPropertyChanged("Cell");
					this.OnCellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelHome", DbType="NVarChar(MAX)")]
		public string TelHome
		{
			get
			{
				return this._TelHome;
			}
			set
			{
				if ((this._TelHome != value))
				{
					this.OnTelHomeChanging(value);
					this.SendPropertyChanging();
					this._TelHome = value;
					this.SendPropertyChanged("TelHome");
					this.OnTelHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress_AddressId", DbType="Int")]
		public System.Nullable<int> DeliveryAddress_AddressId
		{
			get
			{
				return this._DeliveryAddress_AddressId;
			}
			set
			{
				if ((this._DeliveryAddress_AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryAddress_AddressIdChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress_AddressId = value;
					this.SendPropertyChanged("DeliveryAddress_AddressId");
					this.OnDeliveryAddress_AddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalAddress_AddressId", DbType="Int")]
		public System.Nullable<int> PostalAddress_AddressId
		{
			get
			{
				return this._PostalAddress_AddressId;
			}
			set
			{
				if ((this._PostalAddress_AddressId != value))
				{
					if (this._Address1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalAddress_AddressIdChanging(value);
					this.SendPropertyChanging();
					this._PostalAddress_AddressId = value;
					this.SendPropertyChanged("PostalAddress_AddressId");
					this.OnPostalAddress_AddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_PickingListDetail", Storage="_PickingListDetails", ThisKey="ClientId", OtherKey="ClientID")]
		public EntitySet<PickingListDetail> PickingListDetails
		{
			get
			{
				return this._PickingListDetails;
			}
			set
			{
				this._PickingListDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Address", Storage="_Addresses", ThisKey="ClientId", OtherKey="Client_ClientId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client", Storage="_Address", ThisKey="DeliveryAddress_AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._DeliveryAddress_AddressId = value.AddressId;
					}
					else
					{
						this._DeliveryAddress_AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client1", Storage="_Address1", ThisKey="PostalAddress_AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address1
		{
			get
			{
				return this._Address1.Entity;
			}
			set
			{
				Address previousValue = this._Address1.Entity;
				if (((previousValue != value) 
							|| (this._Address1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address1.Entity = null;
						previousValue.Clients1.Remove(this);
					}
					this._Address1.Entity = value;
					if ((value != null))
					{
						value.Clients1.Add(this);
						this._PostalAddress_AddressId = value.AddressId;
					}
					else
					{
						this._PostalAddress_AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_PickingListDetails(PickingListDetail entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
}
#pragma warning restore 1591
